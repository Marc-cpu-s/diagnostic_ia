import streamlit as st
import matplotlib.pyplot as plt
import numpy as np

def evaluate_impact(task_automation, creativity, human_interaction, critical_thinking, data_usage):
    """
    √âvalue l'exposition d'un m√©tier √† l'IA en fonction des crit√®res donn√©s.
    """
    score = (task_automation * 3) + (data_usage * 2) - (creativity * 2) - (human_interaction * 3) - (critical_thinking * 3)
    
    if score > 8:
        return "Forte exposition : Votre m√©tier est tr√®s expos√© √† l'IA. Une adaptation rapide est recommand√©e.", score
    elif score > 4:
        return "Moyenne exposition : Certaines t√¢ches seront automatis√©es, mais la dimension humaine reste cl√©.", score
    else:
        return "Faible exposition : Votre m√©tier repose sur des comp√©tences difficilement rempla√ßables par l'IA.", score

def plot_chart(scores):
    """
    G√©n√®re un graphique radar des crit√®res √©valu√©s.
    """
    labels = ["Automatisation", "Cr√©ativit√©", "Interaction humaine", "Pens√©e critique", "Utilisation de donn√©es"]
    angles = np.linspace(0, 2 * np.pi, len(labels), endpoint=False).tolist()
    scores += scores[:1]  # Boucler le graphique
    angles += angles[:1]
    
    fig, ax = plt.subplots(figsize=(6, 6), subplot_kw={"projection": "polar"})
    ax.fill(angles, scores, color='blue', alpha=0.25)
    ax.plot(angles, scores, color='blue', linewidth=2)
    ax.set_yticklabels([])
    ax.set_xticks(angles[:-1])
    ax.set_xticklabels(labels)
    st.pyplot(fig)

# Interface utilisateur avec Streamlit
st.title("üîç Diagnostic d'impact de l'IA sur votre m√©tier")

st.write("Ce test vous permet d'√©valuer √† quel point votre m√©tier est expos√© √† l'automatisation par l'IA.")

st.subheader("Crit√®res d'√©valuation")

# Cr√©ation des sliders et champs de texte pour les exemples
task_automation = st.slider("Automatisation des t√¢ches (ex : saisie de donn√©es, traitement comptable)", 0, 10, 5)
task_automation_ex1 = st.text_input("Exemple 1 (Automatisation des t√¢ches)")
task_automation_ex2 = st.text_input("Exemple 2 (Automatisation des t√¢ches)")

creativity = st.slider("Cr√©ativit√© et innovation (ex : conception artistique, r√©solution de probl√®mes)", 0, 10, 5)
creativity_ex1 = st.text_input("Exemple 1 (Cr√©ativit√©)")
creativity_ex2 = st.text_input("Exemple 2 (Cr√©ativit√©)")

human_interaction = st.slider("Interaction humaine (ex : service client, √©ducation, th√©rapie)", 0, 10, 5)
human_interaction_ex1 = st.text_input("Exemple 1 (Interaction humaine)")
human_interaction_ex2 = st.text_input("Exemple 2 (Interaction humaine)")

critical_thinking = st.slider("Pens√©e critique et analyse (ex : d√©cisions strat√©giques, recherche)", 0, 10, 5)
critical_thinking_ex1 = st.text_input("Exemple 1 (Pens√©e critique)")
critical_thinking_ex2 = st.text_input("Exemple 2 (Pens√©e critique)")

data_usage = st.slider("Utilisation de donn√©es (ex : analyse de tendances, reporting)", 0, 10, 5)
data_usage_ex1 = st.text_input("Exemple 1 (Utilisation de donn√©es)")
data_usage_ex2 = st.text_input("Exemple 2 (Utilisation de donn√©es)")

# Bouton de diagnostic
if st.button("üîé Diagnostiquer"):
    result, score = evaluate_impact(task_automation, creativity, human_interaction, critical_thinking, data_usage)
    st.subheader("R√©sultat :")
    st.write(result)
    
    # Afficher les exemples fournis
    st.subheader("Vos exemples")
    st.write(f"**Automatisation des t√¢ches** : {task_automation_ex1}, {task_automation_ex2}")
    st.write(f"**Cr√©ativit√©** : {creativity_ex1}, {creativity_ex2}")
    st.write(f"**Interaction humaine** : {human_interaction_ex1}, {human_interaction_ex2}")
    st.write(f"**Pens√©e critique** : {critical_thinking_ex1}, {critical_thinking_ex2}")
    st.write(f"**Utilisation de donn√©es** : {data_usage_ex1}, {data_usage_ex2}")
    
    # Afficher un graphique radar
    plot_chart([task_automation, creativity, human_interaction, critical_thinking, data_usage])
